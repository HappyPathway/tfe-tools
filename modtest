#!/usr/bin/env python3
import json
import os
import re
import subprocess
import shutil
from jinja2 import Template
repo_template = "git@github.corp.clover.com:clover/terraform-{mod_provider}-{mod_name}.git"

def main(key, branch, refresh, target, plan):
    mods = list()
    with open(os.path.join(os.getcwd(), ".terraform/modules/modules.json")) as modules_file:
        d = json.loads(modules_file.read())
    if refresh:
        os.system("terraform init -upgrade")
    for mod in d.get('Modules'):
        if mod.get('Key').endswith(key):
            mod_key = mod.get('Key')
            source = mod.get('Source') 
            if not source.startswith("."):
                source_parts = source.split("/")
                repo = repo_template.format(
                    mod_provider=source_parts[-1], 
                    mod_name=source_parts[-2])
                mod["Repo"] = repo
                repo_dir = mod.get('Dir')
                shutil.rmtree(repo_dir)
                os.system(f"git clone {repo} {repo_dir}")
                cur_dir = os.getcwd()
                os.chdir(repo_dir)
                os.system("git fetch")
                os.system(f"git checkout {branch}")
                os.chdir(cur_dir)
                tf_mod_key = ".module.".join(mod_key.split(".")).lstrip(".")
                if target and plan:
                    os.system(f"terraform plan -target=module.{tf_mod_key}")
                elif plan:
                    os.system(f"terraform plan")
                

if __name__ == '__main__':
    doc = Template('''
    
    usage: {{ file_name }} --branch=${x} --key=${x}

    branch: Provide the branch (--branch) that you're working on in the module's repo.
    refresh: Add the refresh option (--refresh) if you want to terraform init -upgrade all modules prior to test.
    key: The key parameter specifies which top-level module you're wanting to test.
    for instance with the following: 

    module "binlookupservice" {
      source = "terraform.corp.clover.com/clover/service-ha/google"
      ...

    the key would be binlookupservice.
    ''')
    import argparse
    parser = argparse.ArgumentParser(usage=doc.render(file_name=os.path.basename(__file__)))
    parser.add_argument("--key", default=False)
    parser.add_argument("--branch", default=False)
    parser.add_argument("--target", action="store_true", default=False)
    parser.add_argument("--refresh", action="store_true", default=False)
    parser.add_argument("--plan", action="store_true", default=False)
    opt = parser.parse_args()
    main(opt.key, opt.branch, opt.refresh, opt.target, opt.plan)
